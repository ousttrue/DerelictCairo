/*

   Boost Software License - Version 1.0 - August 17th, 2003

   Permission is hereby granted, free of charge, to any person or organization
   obtaining a copy of the software and accompanying documentation covered by
   this license (the "Software") to use, reproduce, display, distribute,
   execute, and transmit the Software, and to prepare derivative works of the
   Software, and to permit third-parties to whom the Software is furnished to
   do so, all subject to the following:

   The copyright notices in the Software and this entire statement, including
   the above license grant, this restriction and the following disclaimer,
   must be included in all copies of the Software, in whole or in part, and
   all derivative works of the Software, unless such copies or derivative
   works are solely in the form of machine-executable object code generated by
   a source language processor.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.

 */
module derelict.cairo.cairo;
import std.string;
import std.array;
import std.algorithm;


private {
    import derelict.util.loader;
    import derelict.util.system;

    static if( Derelict_OS_Windows )
        enum libNames = "cairo.dll";
    /*
       else static if( Derelict_OS_Mac )
       enum libNames = "libcairo.3.dylib,libcairo.dylib";
       else static if( Derelict_OS_Posix )
       enum libNames = "libcairo.so,libcairoso.3,/usr/local/lib/libcairo.so,/usr/local/lib/libcairoso.3";
     */
    else
        static assert( 0, "Need to implement Cairo libNames for this operating system." );
}


class cairo_surface_t{}
class cairo_t{}


enum cairo_format_t {
    CAIRO_FORMAT_INVALID   = -1,
    CAIRO_FORMAT_ARGB32    = 0,
    CAIRO_FORMAT_RGB24     = 1,
    CAIRO_FORMAT_A8        = 2,
    CAIRO_FORMAT_A1        = 3,
    CAIRO_FORMAT_RGB16_565 = 4,
    CAIRO_FORMAT_RGB30     = 5
}


enum cairo_font_slant_t {
    CAIRO_FONT_SLANT_NORMAL,
    CAIRO_FONT_SLANT_ITALIC,
    CAIRO_FONT_SLANT_OBLIQUE
}


enum cairo_font_weight_t {
    CAIRO_FONT_WEIGHT_NORMAL,
    CAIRO_FONT_WEIGHT_BOLD
}


private struct Decl{
    string name;
    string ret;
    string args;
}


static immutable auto decls=[
            Decl("cairo_image_surface_create", "cairo_surface_t*", "cairo_format_t, int, int"),
            Decl("cairo_create", "cairo_t*", "cairo_surface_t*"),
            Decl("cairo_set_source_rgb", "void", "cairo_t*, double, double, double"),
            Decl("cairo_select_font_face", "void", "cairo_t*, const char*, cairo_font_slant_t, cairo_font_weight_t"),
            Decl("cairo_set_font_size", "void", "cairo_t*, double"),
            Decl("cairo_move_to", "void", "cairo_t*, double, double"),
            Decl("cairo_show_text", "void", "cairo_t*, const char*"),
            Decl("cairo_surface_write_to_png", "void", "cairo_surface_t*, const char*"),
            Decl("cairo_destroy", "void", "cairo_t*"),
            Decl("cairo_surface_destroy", "void", "cairo_surface_t*"),
            ];


extern( C ) {
    mixin(decls.map!(d => 
                format("alias da_%s = %s function(%s) nothrow;", d.name, d.ret, d.args)
                ).join());
}


__gshared {
    mixin(decls.map!(d => 
                format("da_%s %s;", d.name, d.name)
                ).join());
}


class DerelictCairoLoader : SharedLibLoader {
    public this() {
        super( libNames );
    }
    protected override void loadSymbols() {
        mixin(decls.map!(d => 
                    format("bindFunc(cast(void**)&%s, \"%s\");", d.name, d.name)
                    ).join());
    }
}


__gshared DerelictCairoLoader DerelictCairo;


shared static this() {
    DerelictCairo = new DerelictCairoLoader();
}


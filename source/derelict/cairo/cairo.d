/*

   Boost Software License - Version 1.0 - August 17th, 2003

   Permission is hereby granted, free of charge, to any person or organization
   obtaining a copy of the software and accompanying documentation covered by
   this license (the "Software") to use, reproduce, display, distribute,
   execute, and transmit the Software, and to prepare derivative works of the
   Software, and to permit third-parties to whom the Software is furnished to
   do so, all subject to the following:

   The copyright notices in the Software and this entire statement, including
   the above license grant, this restriction and the following disclaimer,
   must be included in all copies of the Software, in whole or in part, and
   all derivative works of the Software, unless such copies or derivative
   works are solely in the form of machine-executable object code generated by
   a source language processor.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.

 */
module derelict.cairo.cairo;


private {
    import derelict.util.loader;
    import derelict.util.system;

    static if( Derelict_OS_Windows )
        enum libNames = "cairo.dll";
    /*
       else static if( Derelict_OS_Mac )
       enum libNames = "libcairo.3.dylib,libcairo.dylib";
       else static if( Derelict_OS_Posix )
       enum libNames = "libcairo.so,libcairoso.3,/usr/local/lib/libcairo.so,/usr/local/lib/libcairoso.3";
     */
    else
        static assert( 0, "Need to implement Cairo libNames for this operating system." );
}


class cairo_surface_t{}
class cairo_t{}


enum cairo_format_t {
    CAIRO_FORMAT_INVALID   = -1,
    CAIRO_FORMAT_ARGB32    = 0,
    CAIRO_FORMAT_RGB24     = 1,
    CAIRO_FORMAT_A8        = 2,
    CAIRO_FORMAT_A1        = 3,
    CAIRO_FORMAT_RGB16_565 = 4,
    CAIRO_FORMAT_RGB30     = 5
}


enum cairo_font_slant_t {
    CAIRO_FONT_SLANT_NORMAL,
    CAIRO_FONT_SLANT_ITALIC,
    CAIRO_FONT_SLANT_OBLIQUE
}


enum cairo_font_weight_t {
    CAIRO_FONT_WEIGHT_NORMAL,
    CAIRO_FONT_WEIGHT_BOLD
}


extern( C ) nothrow {
    alias da_cairo_image_surface_create = cairo_surface_t* function(cairo_format_t, int, int);
    alias da_cairo_create = cairo_t* function(cairo_surface_t*);
    alias da_cairo_set_source_rgb = void function(cairo_t*, double, double, double);
    alias da_cairo_select_font_face = void function(cairo_t*, const char*, cairo_font_slant_t, cairo_font_weight_t);
    alias da_cairo_set_font_size = void function(cairo_t*, double);
    alias da_cairo_move_to = void function(cairo_t*, double, double);
    alias da_cairo_show_text = void function(cairo_t*, const char*);
    alias da_cairo_surface_write_to_png = void function(cairo_surface_t*, const char*);
    alias da_cairo_destroy = void function(cairo_t*);
    alias da_cairo_surface_destroy = void function(cairo_surface_t*);
}


__gshared {
    da_cairo_image_surface_create cairo_image_surface_create;
    da_cairo_create cairo_create;
    da_cairo_set_source_rgb cairo_set_source_rgb;
    da_cairo_select_font_face cairo_select_font_face;
    da_cairo_set_font_size cairo_set_font_size;
    da_cairo_move_to cairo_move_to;
    da_cairo_show_text cairo_show_text;
    da_cairo_surface_write_to_png cairo_surface_write_to_png;
    da_cairo_destroy cairo_destroy;
    da_cairo_surface_destroy cairo_surface_destroy;
}


class DerelictCairoLoader : SharedLibLoader {
    public this() {
        super( libNames );
    }

    protected override void loadSymbols() {
        bindFunc(cast(void**)&cairo_image_surface_create, "cairo_image_surface_create");
        bindFunc(cast(void**)&cairo_create, "cairo_create");
        bindFunc(cast(void**)&cairo_set_source_rgb, "cairo_set_source_rgb");
        bindFunc(cast(void**)&cairo_select_font_face, "cairo_select_font_face"); 
        bindFunc(cast(void**)&cairo_set_font_size, "cairo_set_font_size");
        bindFunc(cast(void**)&cairo_move_to, "cairo_move_to");
        bindFunc(cast(void**)&cairo_show_text, "cairo_show_text");
        bindFunc(cast(void**)&cairo_surface_write_to_png, "cairo_surface_write_to_png");
        bindFunc(cast(void**)&cairo_destroy, "cairo_destroy");
        bindFunc(cast(void**)&cairo_surface_destroy, "cairo_surface_destroy");
    }
}


__gshared DerelictCairoLoader DerelictCairo;


shared static this() {
    DerelictCairo = new DerelictCairoLoader();
}

